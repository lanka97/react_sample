app.use('/api', createProxyMiddleware({
    target: 'http://example.com',
    changeOrigin: true,
    logLevel: 'debug',
    onProxyReq: (proxyReq, req, res) => {
        console.log(`Proxying request to: ${proxyReq.getHeader('host')}${req.url}`);
        console.log(`Request method: ${req.method}`);
        console.log(`Request headers: ${JSON.stringify(req.headers)}`);
    },
    onProxyRes: (proxyRes, req, res) => {
         proxyRes.on('data', (chunk) => {
            body.push(chunk);
        });
        proxyRes.on('end', () => {
            body = Buffer.concat(body).toString();
            console.log(`Response body: ${body}`);
        })
        console.log(`Received response with status: ${proxyRes.statusCode}`);
        console.log(`Response headers: ${JSON.stringify(proxyRes.headers)}`);
    },
    onError: (err, req, res) => {
        console.error('Proxy error:', err);
        res.status(500).send('Proxy error');
    }
}));


const http = require('http');
const url = require('url');
const fetch = require('node-fetch');

const server = http.createServer(async (req, res) => {
    const targetUrl = 'http://example.com' + req.url;
    const options = {
        method: req.method,
        headers: req.headers,
    };

    try {
        const proxyRes = await fetch(targetUrl, options);

        // Forward headers and status code to the response
        res.writeHead(proxyRes.status, proxyRes.headers.raw());

        // Stream the response body back to the client
        proxyRes.body.pipe(res);
    } catch (err) {
        console.error(err);
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('Proxy request failed');
    }
});

server.listen(3000, () => {
    console.log('Proxy server is running on port 3000');
});
